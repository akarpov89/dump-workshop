@page "/issues"
@inject IIssueService IssueService

@using System.Threading
@using IssuesApp.Data
@using IssuesApp.Helpers

<h3>
    GitHub Issues for
    <a href="https://github.com/@OwnerName" target="_blank">@OwnerName</a>
    /
    <a href="https://github.com/@OwnerName/@RepoName" target="_blank">@RepoName</a>
</h3>

<button class="btn btn-success" @onclick="StartLoading">Load</button>
<button class="btn btn-danger" @onclick="CancelLoading">Cancel</button>

@if (myIssues == null)
{
    <p>Issues count: @myIssuesCount</p>
}
else
{
    <p>Issues count: @myIssuesCount</p>

    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Author</th>
            <th>Status</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var issue in myIssues)
        {
            <tr>
                <td style="max-width: 500px"><a href="@issue.Url" target="_blank">@issue.Title</a></td>
                <td>@issue.Categorize()</td>
                <td><a href="@issue.Author.Url" target="_blank">@issue.Author.Login</a></td>
                <td>@(issue.State.ToString())</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private const string OwnerName = "dotnet";
    private const string RepoName = "roslyn";

    private IEnumerable<Issue> myIssues;
    private int myIssuesCount;

    private CancellationTokenSource myCancellationTokenSource;

    private async void StartLoading()
    {
        myIssues = null;
        myIssuesCount = 0;

        var progress = new ActionProgress(value =>
        {
            InvokeAsync(() =>
            {
                myIssuesCount = value;
                StateHasChanged();
            });
        });

        myCancellationTokenSource = new CancellationTokenSource();

        try
        {
            myIssues = await IssueService.GetIssuesAsync(
                OwnerName,
                RepoName,
                progress,
                myCancellationTokenSource.Token);

            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void CancelLoading()
    {
        myCancellationTokenSource.Cancel();
    }

}
