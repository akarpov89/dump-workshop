@page "/fetchdata"
@inject IIssueService IssueService

@using System.Threading
@using IssuesApp.Data

<button class="btn btn-primary" @onclick="StartLoading">Load issues</button>
<button class="btn btn-primary" @onclick="CancelLoading">Cancel</button>
<button class="btn btn-primary" @onclick="CancelLoading2">Cancel2</button>

<p>Issues count: @issues.Count</p>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Author</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var issue in issues)
        {
            <tr>
                <td style="max-width: 500px"><a href="@issue.Url" target="_blank">@issue.Title</a></td>
                <td>@issue.Categorize()</td>
                <td><a href="@issue.Author?.Url" target="_blank">@issue.Author?.Login</a></td>
                <td>@issue.State.ToString()</td>
            </tr>
        }
    </tbody>
</table>

@code {
    readonly List<Issue> issues = new List<Issue>();

    CancellationTokenSource? cts;
    CancellationTokenSource? cts2;

    private async void StartLoading()
    {
        issues.Clear();
        cts = new CancellationTokenSource();
        cts2 = new CancellationTokenSource();

        try
        {
            await foreach (var issue in IssueService.GetIssuesAsync("dotnet", "roslyn", cts.Token).WithCancellation(cts2.Token))
            {
                issues.Add(issue);
                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void CancelLoading()
    {
        cts?.Cancel();
    }
    private void CancelLoading2()
    {
        cts2?.Cancel();
    }
}
