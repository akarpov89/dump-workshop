@page "/fetchdata"

@using System.Threading
@using IssuesApp.Data

<button class="btn btn-primary" @onclick="StartLoading">Load issues</button>
<button class="btn btn-primary" @onclick="CancelLoading">Cancel</button>
<button class="btn btn-primary" @onclick="CancelLoading2">Cancel2</button>

<p>Issues count: @issues.Count</p>
<p></p>
<p>Opened by vsfeedback: @openedByFeedback</p>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Category</th>
        <th>Author</th>
        <th>Status</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var issue in issues)
    {
        <tr>
            <td style="max-width: 500px"><a href="@issue.Url" target="_blank">@issue.Title</a></td>
            <td>@issue.Categorize()</td>
            <td><a href="@issue.Author?.Url" target="_blank">@issue.Author?.Login</a></td>
            <td>@issue.State.ToString()</td>
        </tr>
    }
    </tbody>
</table>

@code {
    List<Issue> issues = new List<Issue>();
    int openedByFeedback = 0;

    CancellationTokenSource cts;
    CancellationTokenSource cts2;

    private async void StartLoading()
    {
        issues.Clear();
        openedByFeedback = 0;
        cts = new CancellationTokenSource();
        cts2 = new CancellationTokenSource();

        try
        {
            await using var issueService = new GitHubIssueService("dotnet", "roslyn");

            await foreach (var issue in issueService.GetIssuesAsync(cts.Token).WithCancellation(cts2.Token))
            {
                issues.Add(issue);

                if (issue is { State: IssueState.Open, Author: {Login: "vsfeedback"} })
                {
                    openedByFeedback++;
                }

                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void CancelLoading()
    {
        cts.Cancel();
    }
    private void CancelLoading2()
    {
        cts2.Cancel();
    }
}
